#include <stdio.h>

#define P 3   // Number of processes
#define R 3   // Number of resources

int main() {
    int alloc[P][R] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}};
    int max[P][R] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}};
    int avail[R] = {3, 3, 2};
    int finish[P] = {0}, safeSeq[P], work[R];
    
    for (int i = 0; i < R; i++) work[i] = avail[i];
    for (int count = 0; count < P;) {
        int found = 0;
        for (int i = 0; i < P; i++) {
            if (!finish[i]) {
                int j;
                for (j = 0; j < R; j++)
                    if (max[i][j] - alloc[i][j] > work[j]) break;
                if (j == R) {
                    for (int k = 0; k < R; k++) work[k] += alloc[i][k];
                    safeSeq[count++] = i; finish[i] = 1; found = 1;
                }
            }
        }
        if (!found) { printf("No safe sequence found\n"); return 1; }
    }
    printf("Safe sequence is: ");
    for (int i = 0; i < P; i++) printf("P%d ", safeSeq[i]);
    return 0;
}
